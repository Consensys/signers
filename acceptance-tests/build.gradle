/*
 * Copyright 2020 ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

plugins {
  id "de.undercouch.download" version "4.1.0"
  id "com.google.osdetector" version "1.6.2"
}

apply plugin: 'java-library'
apply plugin: 'java-test-fixtures'

testFixturesJar {
  archiveBaseName = calculateJarName(project)
}

dependencies {

  testRuntimeOnly 'javax.activation:activation'
  testRuntimeOnly 'org.apache.logging.log4j:log4j-core'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation 'org.bouncycastle:bcpkix-jdk15on'

  testImplementation project(':keystorage:hashicorp')

  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testImplementation 'io.vertx:vertx-core'
  testImplementation 'io.vertx:vertx-web'

  testImplementation 'org.apache.logging.log4j:log4j-api'
  testImplementation 'org.assertj:assertj-core'
  testImplementation 'org.apache.tuweni:tuweni-bytes'
  testImplementation 'org.web3j:core'
  testImplementation project(':signing:secp256k1:api')
  testImplementation(testFixtures(project(":keystorage:hashicorp")))
  testImplementation(testFixtures(project(":signing:secp256k1:impl")))

  testFixturesImplementation 'org.apache.logging.log4j:log4j-api'
  testFixturesImplementation 'org.assertj:assertj-core'
  testFixturesImplementation(testFixtures(project(":keystorage:hashicorp")))
  testFixturesImplementation(testFixtures(project(":signing:secp256k1:impl")))
  testFixturesImplementation project(':signing:secp256k1:api')
}

test.enabled = false

def vaultBinary () {
  switch (osdetector.os) {
    case "windows":
      return new File(buildDir, "vault.exe").toString()
    default:
      return new File(buildDir, "vault").toString()
  }
}

def vaultDownloadUrl() {
  // see gradle.properties for Hashicorp Vault URL
  switch (osdetector.os) {
    case "windows":
      return "${hashicorpVaultUrl}/${hashicorpVaultVersion}/vault_${hashicorpVaultVersion}_windows_amd64.zip"
      break
    case "linux":
      return "${hashicorpVaultUrl}/${hashicorpVaultVersion}/vault_${hashicorpVaultVersion}_linux_amd64.zip"
      break
    case "osx":
      return "${hashicorpVaultUrl}/${hashicorpVaultVersion}/vault_${hashicorpVaultVersion}_darwin_amd64.zip"
      break
  }
}

task downloadVault(type: Download) {
  src {
    return vaultDownloadUrl()
  }
  dest new File(buildDir, "hashicorp.zip")
  onlyIfModified true
}

task extractVault(dependsOn: downloadVault, type: Copy) {
  from zipTree(downloadVault.dest)
  into buildDir
}

task acceptanceTest(dependsOn: [
  rootProject.installDist,
  extractVault
], type: Test) {
  inputs.property "integration.date", LocalTime.now() // so it runs at every invocation

  mustRunAfter rootProject.subprojects*.test
  description = 'Runs Signer utility acceptance tests.'
  group = 'verification'

  systemProperty 'vaultBinary', vaultBinary()

  useJUnitPlatform()
  // toggle to show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = false
}
